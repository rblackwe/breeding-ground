# Makefile                                                        -*- make -*-
#
# Copyright (C) 2004-2006 by Socialtext, Inc.
#
#
# This Makefile is the center of the Socialtext build and install
# system.  It also has a number of convienence targets which aid
# in day-to-day development and maintenance.
#
# Make Docs: http://www.gnu.org/software/make/manual/make.html

DESTDIR = @DESTDIR@
PREFIX  = $(DESTDIR)@PREFIX@

# User/group who should own certain files, like init scripts.
ROOT_USER  = @ROOT_USER@
ROOT_GROUP = @ROOT_GROUP@

# Special user/group who runs the web service and must own certain files.
ST_USER  = @ST_USER@
ST_GROUP = @ST_GROUP@

# Unix user as whom we must create the database user.
DB_SUPERUSER = @DB_USER@

# The program used to actually write files and directories out to disk.
INSTALL      = @INSTALL_PROG@
INSTALL_ROOT = $(INSTALL)
INSTALL_ST   = $(INSTALL) -o $(ST_USER) -g $(ST_GROUP)

# Install locations
INIT_D_DIR      = $(PREFIX)@INIT_D@
ST_INSTALL_DIR  = $(PREFIX)@SHAREDIR@
INSTALL_LIB     = $(PREFIX)@LIBDIR@
INSTALLSCRIPT   = $(PREFIX)@BINDIR@

# Perl location
PERL = @PERL@
PROVE = `which prove`

# Program locations
STCTL          = $(PERL) dev-bin/nlwctl
STDB           = $(PERL) bin/st-db
POST_INSTALL   = $(PERL) bin/st-post-install
STCONFIG       = $(PERL) dev-bin/st-config-wrapper
GENCONFIG      = $(PERL) dev-bin/gen-config
CREATE_DB_USER = $(PERL) dev-bin/create-db-user

# Init scripts called to stop/start services during 'make upgrade'.
APACHE_SCRIPT    = $(INIT_D_DIR)/apache-perl
APACHE2_SCRIPT   = $(INIT_D_DIR)/apache2
CEQLOTRON_SCRIPT = $(INIT_D_DIR)/ceqlotron
SERVICE_SCRIPTS  = $(APACHE_SCRIPT) $(APACHE2_SCRIPT) $(CEQLOTRON_SCRIPT)

# File sets that can be installed (use install-files to get all files)
INSTALL_BASE = install-css        \
               install-dev        \
               install-html       \
               install-images     \
               install-javascript \
               install-js-test    \
               install-test       \
               install-migrations \
               install-l10n \
               install-post-install \
               install-wsdl

INSTALL_FILE_TARGETS = $(INSTALL_BASE)   \
                       install-doc-pages \
                       install-mason     \
                       install-template 

INSTALL_PKGS_TARGETS = install-pkgs-dapper \
                       install-pkgs-breezy \
                       install-pkgs-dapper-dev

# Configuration targets for $(GENCONFIG)
CONF_TARGETS = apache-config      \
               apache-perl-config \
               apache2-config     \
               app-config         \
               ssl-config

# Directories to be installed
DATA_ROOT_DIR    = $(PREFIX)@WEBROOT@
DOCUMENT_ROOT    = $(PREFIX)@WEBROOT@/docroot
CACHE_DIR        = $(PREFIX)@CACHEDIR@
CRON_DIR         = $(PREFIX)/etc/cron.d
SPOOL_DIR        = $(PREFIX)@SPOOLDIR@
INSTALLED_DIRS   = $(INIT_D_DIR)       \
                   $(ST_INSTALL_DIR)   \
                   $(DATA_ROOT_DIR)    \
                   $(DOCUMENT_ROOT)    \
		   $(CACHE_DIR)        \
		   $(CRON_DIR)         \
                   $(PREFIX)@PIDDIR@   \
		   $(SPOOL_DIR) \
		   $(SPOOL_DIR)/ceq \
                   $(PREFIX)@HTTPD_LOCKDIR@ \
                   $(PREFIX)@HTTPD_LOGDIR@  \
                   $(PREFIX)@HTTPD_PIDDIR@  \
                   $(PREFIX)@HTTPD_CONFDIR@/conf.d

# Runnable programs to be installed
CEQLOTRON_BIN = $(INSTALLSCRIPT)/ceqlotron
BIN_FILES     = $(shell dev-bin/perl-bin-files -v bin/)

# Makefile generated by Makefile.PL via configure
PERL_MAKEFILE  = build/tmp/Makefile.perl
PERL_MAKE      = $(MAKE) -f $(PERL_MAKEFILE)

# DB Testing Command
DB_USER = nlw
DB_LOGIN_TEST = $(SUDO) -u $(ST_USER) build/bin/db-login-test $(DB_USER)

# Empty string if we're upgrading, otherwise a non-zero length string.
FRESH_INSTALL_P=@FRESH_INSTALL@

# Common commands
RM           = rm -f
CP           = cp
FIND         = find
SUDO         = sudo
CHOWN        = chown
CHMOD        = chmod
MKDIR        = mkdir -p
RM_DIR       = $(RM) -R
CP_DIR       = $(CP) -Lpr
CHOWN_DIR_ST = $(CHOWN) -R $(ST_USER):$(ST_GROUP)

##############################################################################

# The first declared target is the one used when you do `make` by itself
# `@` in front of a command tells make not to print the command

default:
	$(PERL_MAKE)

dev: dev-env
env: dev-env
dev-env: dev-bin/fresh-dev-env-from-scratch
	$<

PKGDIST=$(subst install-pkgs-,,$@)
$(INSTALL_PKGS_TARGETS): install-ok
	$(SUDO) apt-get install `cat build/pkg-lists/$(PKGDIST)`

# Used by the Debian package system, which needs to run some of the installer
# bits in a different order.
debian: install-dirs      \
        install-files     \
        install-perl      \
	install-bin       \
        install-appliance-bin \
        install-debian

install-debian:
	$(MKDIR) $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/create-db-user $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/gen-config $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/setup-postgres-permissions $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) build/bin/db-login-test $(ST_INSTALL_DIR)/debian/bin/
	$(MKDIR) $(ST_INSTALL_DIR)/debian/build/
	$(CP_DIR) build/templates $(ST_INSTALL_DIR)/debian/build

install-appliance-bin: install-ok
	$(INSTALL_ROOT) `$(FIND) appliance-bin/ -maxdepth 1 -type f` $(INSTALLSCRIPT)

# st-install is for install on prod, staging and other like machines
# that use dual apache
st-install: install-ok      \
         shared-install     \
         install-st-init-d  \
         st-apache          \
	 install-cron-jobs  \
         clean-temps

# Used by OSR installs
install: install-ok         \
         shared-install     \
         install-init-d     \
         osr-apache

shared-install: install-ok  \
         remove-old-install \
         db-user            \
         install-dirs       \
         install-files      \
         install-perl       \
	 install-bin       \
         config             \
         schema             \
	 initialize-st-migrate \
	 run-post-install

# Run st-migrate --initialize if this is a fresh install
initialize-st-migrate:
	if [ "$(FRESH_INSTALL_P)" = "1"  ]; then st-migrate --initialize; fi

# If a target does install tasks, make this a dependency, then it will fail if
# /etc/dont-install-nlw-here exists.
install-ok:
	[ ! -e /etc/dont-install-nlw-here ] || [ -e configure-stamp ]

db-user:
	$(SUDO) -u $(DB_SUPERUSER) $(CREATE_DB_USER)
	$(DB_LOGIN_TEST) template1

remove-old-install: 
	$(RM_DIR) $(ST_INSTALL_DIR) 
	$(RM_DIR) $(INSTALL_LIB)/{Public,Control,Socialtext}

install-perl: install-ok
	$(PERL_MAKE) install

config: install-ok \
        app-config \
        ssl-config

osr-apache: install-ok config
	$(GENCONFIG) --sitewide --apache-proxy=@APACHE_PROXY@ --hostname=@HOSTNAME@

st-apache: install-ok config apache-config

TARG=$(subst -config,,$@)
$(CONF_TARGETS): install-ok
	$(GENCONFIG) --sitewide --target=$(TARG)

schema: install-ok
	$(SUDO) -u $(ST_USER) $(STDB) --sync
	$(SUDO) -u $(ST_USER) $(STDB) --required-data
	$(DB_LOGIN_TEST) template1 NLW

install-files: install-ok         \
               $(ST_INSTALL_DIR)  \
               javascript         \
               favicon            \
               install-base       \
               $(INSTALL_FILE_TARGETS)

DIR=$(subst install-,,$@)
$(INSTALL_FILE_TARGETS): install-ok 
	$(INSTALL_ST) -d $(ST_INSTALL_DIR)/$(DIR)
	$(CP_DIR) share/$(DIR) $(ST_INSTALL_DIR)
	$(CHOWN_DIR_ST) $(ST_INSTALL_DIR)/$(DIR)
	$(MKDIR) $(PREFIX)@PIDDIR@
	$(CHOWN_DIR_ST) $(PREFIX)@PIDDIR@
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '.svn' -type d \
	   -exec $(RM_DIR) {} \; 2>/dev/null || /bin/true
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '*.in' -type f \
	   -exec $(RM) {} \; 2>/dev/null || /bin/true
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '*.test' -type f \
	   -exec $(RM) {} \; 2>/dev/null || /bin/true

install-base: install-ok $(INSTALL_BASE)
	ln -f -s $(ST_INSTALL_DIR) $(ST_INSTALL_DIR)/base

js: javascript
javascript:
	if [ @JS_MODULES@ = "1"]; then $(MAKE) -C share/javascript all; fi

favicon: install-ok $(DATA_ROOT_DIR)
	$(INSTALL_ST) share/images/favicon.ico $(DATA_ROOT_DIR)/favicon.ico

install-init-d: install-ok etc/init.d/ceqlotron
	$(INSTALL_ROOT) \
	   $(shell find etc/init.d -type f -not -name '*.in' | grep -v .svn) $(INIT_D_DIR)

install-st-init-d: install-ok etc/init.d/ceqlotron
	$(INSTALL_ROOT) etc/init.d/ceqlotron $(INIT_D_DIR)

install-bin: install-ok
	if [ "x$(BIN_FILES)" != "x" ]; then \
		$(INSTALL_ROOT) $(BIN_FILES) $(INSTALLSCRIPT); \
	fi

# Install all the dirs in one go, but allow per dir dependencies.
$(INSTALLED_DIRS): install-ok install-dirs
$(DATA_ROOT_DIR): install-ok install-dirs
	$(CHMOD) 2775 $(DATA_ROOT_DIR)
install-dirs: install-ok 
	$(INSTALL_ST) -d $(INSTALLED_DIRS)

run-post-install: install-ok
	$(POST_INSTALL)

install-cron-jobs: install-ok
	$(INSTALL_ROOT) -m 644 etc/cron/* $(CRON_DIR)

stop-start: stop-services start-services

stop-services:
	$(APACHE_SCRIPT) stop
	$(APACHE2_SCRIPT) stop
	$(CEQLOTRON_SCRIPT) stop

start-services:
	for script in $(SERVICE_SCRIPTS); do \
	   $$script start; \
	done

clean-temps: install-ok clean-cache

clean-cache: clean-formatter-cache clean-mason-cache clean-tt2-cache

clean-formatter-cache:
	$(RM_DIR) $(CACHE_DIR)/formatter

clean-mason-cache:
	$(RM_DIR) $(CACHE_DIR)/mason

clean-tt2-cache:
	$(RM_DIR) $(CACHE_DIR)/tt2

CLEANER=if [ -e $(PERL_MAKEFILE) ]; then $(PERL_MAKE) $@; fi; \
        $(RM_DIR) blib/ pm_to_blib build/tmp/* t/tmp*         \
        $(shell build/bin/list-in-files --not-dot-in)         \
        Makefile MANIFEST MANIFEST.bak                        \
	$(shell find debian/ -type d -mindepth 1)             \
	debian/files debian/*.install

clean-in-files:
	rm -f $(shell build/bin/list-in-files --not-dot-in) Makefile

clean:
	$(CLEANER)

realclean:
	$(RM) Socialtext*.tar.gz
	$(CLEANER)

wipe: stop-services realclean uninstall

uninstall: remove-old-install clean-temps
	# XXX: Don't hard code this stuff.
	$(RM_DIR) /var/{run,www,spool,cache}/socialtext
	$(RM) /etc/init.d/ceqlotron
	$(RM) /etc/aliases.deliver

cpan:
	$(SUDO) cpan $(shell $(PERL) dev-bin/list-module-deps -u | awk '{print $1}')

check-deps: check-dependencies
check-dependencies:
	$(PERL) dev-bin/list-module-deps -u

diff:
	svndiff

# These are .PHONY targets so they're always run.
manifest: MANIFEST
MANIFEST:
	$(PERL_MAKE) manifest
	# XXX: Hack a filename because ExtUtils::Manifest can't handle spaces.
	perl -i -p -e 's/^(.*Rule #1)$$/#-#$$1/' $@

tardist: MANIFEST $(PERL_MAKEFILE)
	$(PERL_MAKE) tardist

test:
	$<
	$(PERL) $(PROVE) -l $(shell find t -name '*.t' -not -regex '^t/live.*' | sort)


testlive:
	$(PERL) $(PROVE) -l t/live



testall: test testlive

# cd into custom-workspace-config and make all
custom-workspaces:
	@$(MAKE) -C build/custom-ws-config all

# It would make (no pun intended) my day if this target actually worked:
mac-go:
	./dev-bin/make-mac-go

# Andy's working on a set of Perl::Critic rules
critic:
	perlcritic -3 -q \
	    -profile build/perlcriticrc \
	    lib/ t/ bin/

# `make` assumes targets are files. .PHONY declares targets that are not.
.PHONY: default                  \
        dev                      \
        env                      \
        dev-env                  \
        release                  \
        bundles                  \
        st-install               \
        install                  \
        install-ok               \
	shared-install           \
        db-user                  \
        remove-old-install       \
        install-perl             \
        config                   \
        osr-apache               \
        st-apache                \
        schema                   \
        install-files            \
        $(INSTALL_FILE_TARGETS)  \
        $(CONF_TARGETS)          \
        $(INSTALL_PKGS_TARGETS)  \
        install-eventspace-forms \
        js                       \
        install-base             \
        javascript               \
        favicon                  \
        install-init-d           \
        install-st-init-d        \
        install-bin              \
        install-dirs             \
        install-appliance-bin    \
        install-post-install     \
	run-post-install         \
	install-cron-jobs        \
        upgrade                  \
        stop-start               \
        stop-services            \
        start-services           \
        clean-temps              \
        clean-cache              \
        clean                    \
        clean-in-files           \
        realclean                \
        wipe                     \
        uninstall                \
        cpan                     \
        check-deps               \
        check-dependencies       \
        diff                     \
        MANIFEST                 \
        manifest                 \
        tardist                  \
        test                     \
        testlive                 \
        testall                  \
        custom-workspaces        \
	critic                   \
        mac-go
