#!/usr/bin/env perl
#
# Copyright (C) 2004-2006 by Socialtext, Inc.
#

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use File::Basename ();
use File::Copy     ();
use File::Path     ();
use File::Spec;
use Getopt::Long;
use List::Util qw(first);
use Socialtext::AppConfig;
use Socialtext::Schema;
use User::pwent;


my @ORIGINAL_ARGV = @ARGV;
my @Commands = qw( sync_sql sync recreate ddl dump_data required_data );

my %opts = ( maxretries => 8 );
GetOptions(
    'help'  => \$opts{help},
    'quiet' => \$opts{quiet},
    'retrynum:i' => \$opts{retrynum},
    'maxretries:i' => \$opts{maxretries},
    ( map { $_->[0] => \$opts{ $_->[1] } }
      map { my $dash = $_; $dash =~ s/_/-/g; [ $dash, $_ ] }
      @Commands ),
) or die "\n";

usage() if $opts{help};

sub show {
    if ( !$opts{quiet} ) {
        for ( @_ ) {
            print STDERR $_, "\n";
        }
    }
}

my $command = first { $opts{$_} && $_ } @Commands;

{
    no strict 'refs';
    unless ( defined &{$command} ) {
        usage();
        exit;
    }
}

my $schema = Socialtext::Schema::SchemaObject();

{
    no strict 'refs';
    _repeat_ignoring_other_access( sub { &{$command}($schema) } );
}

sub recreate {
    my $schema = shift;

    my %connect = _connect_params();

    show("\nRecreating schema as $connect{schema_name}");

    dump_data($schema);

    if ( _schema_exists_in_backend($schema) ) {
        _repeat_ignoring_other_access( sub { $schema->drop(%connect) } );
    }

    $schema->set_instantiated(0);

    # shuts up notice messages from postgres
    local $SIG{__WARN__} = sub { };
    _repeat_ignoring_other_access( sub { $schema->create(%connect) } );
}

sub _repeat_ignoring_other_access {
    my $sub = shift;

    # Try to run the command.
    eval { $sub->() };
    my $e = $@;
    return unless $e;
    die $e if $e and $e !~ /database "\w+" is being accessed/;

    # If we got this far, it's time to retry.
    my $attempt = $opts{retrynum} || 1;
    chomp( my $message = ref($e) ? $e->error : $e );
    show("Got error: $message, attempt $attempt");

    # Launch a retry
    if ( $attempt < $opts{maxretries} ) {
        # Sleep here, before we retry anything.  This is to avoid errors like: 
        #       source database "template1" is being accessed by other users
        # We also do a reexec to retry, but sleeping throttles the whole action a bit
        # to prevent these kinds of things in the first place.
        sleep 10;

        # We exec() on retry, rather than just loop, because Alzabo carries
        # around some global state which we need to eradicate.  exec()'ing
        # make sure we start clean.
        exec( $0, @ORIGINAL_ARGV, "--retrynum", $attempt + 1 );
    }
    else {
        die $e;
    }
}

sub sync_sql {
    my $schema = shift;

    my %connect = _connect_params();

    my @sync_sql = $schema->sync_backend_sql(%connect);
    unless (@sync_sql) {
        show( "\nNo changes needed to sync $connect{schema_name}" );
        return;
    }

    show( @sync_sql );
}

sub sync {
    my $schema = shift;

    my %connect = _connect_params();

    my @sync_sql = $schema->sync_backend_sql(%connect);
    unless (@sync_sql) {
        show( "\nNo changes needed to sync $connect{schema_name}" );
        return;
    }

    dump_data($schema);

    show( "\nSyncing schema to $connect{schema_name}" );

    show( @sync_sql );

    local $SIG{__WARN__} = sub { };
    $schema->sync_backend(%connect);

    # This works around a bug in the Alzabo schema reverse engineering
    # code where it does not realize it needs to create the sequence when it
    # alters the table.  N.B.: We're just ignoring any possible errors because
    # we know the sequence might already exist.  This will all get moved into an
    # Alzabo patch eventually.  We hope.
    eval {
        my $driver = $schema->driver;
        $driver->connect(%connect);
        $driver->do( sql => 'CREATE SEQUENCE "User___user_id"' );
    };
}

sub ddl {
    my $schema = shift;

    show("\nSchema SQL:");

    $schema->set_instantiated(0);
    show( $schema->make_sql() );
}

sub required_data {
    require Socialtext::Data;

    for my $c ( Socialtext::Data::Classes() ) {
        eval "require $c";
        die $@ if $@;

        $c->EnsureRequiredDataIsPresent
            if $c->can('EnsureRequiredDataIsPresent');
    }
}

sub dump_data {
    my $schema = shift;

    return unless _schema_exists_in_backend($schema);

    my %connect = _connect_params();
    my $time    = time;
    my $file    = "/tmp/$connect{schema_name}-dump.$time.sql";

    my @parms = (
        'pg_dump',
        '-C',
        '-D',
        '-U' => $connect{user},
        '-f' => $file,
    );
    push( @parms, '--password' => $connect{password} )  if $connect{password};
    push( @parms, '--host'     => $connect{host} )      if $connect{host};
    push( @parms, $connect{schema_name} );

    system( @parms ) and die "Cannot call @parms";

    show( "Dumped data to $file" );
}

# XXX This is very close to Socialtext::AppConfig::db_connect_params()
# Let's try to refactor and hoist.
sub _connect_params {
    my %connect = ( schema_name => 'NLW' );

    for my $k (qw( db_schema_name db_user db_password db_host db_port )) {
        next unless Socialtext::AppConfig->can($k);

        my $connect_k = $k;
        $connect_k =~ s/^db_//;

        $connect{$connect_k} = Socialtext::AppConfig->$k();
    }

    return %connect;
}

sub _schema_exists_in_backend {
    my $schema = shift;

    my %connect = _connect_params();
    my $name    = delete $connect{schema_name};

    return grep { $_ eq $name } $schema->driver->schemas(%connect);
}

sub usage {
    my $msg = shift;

    show($msg) if $msg;

    show( <<"EOF" );

  st-db --recreate --sync

This program can be used to manage the Socialtext Postgres database
schema.  It can drop and create (--recreate) or sync to an existing
schema (--sync).

It will get the schema name and connection params by using the
Socialtext::AppConfig module, so you need to have an up-to-date config file
for this to work.

It accepts the following options:

  --help           Produce this message

  --quiet          Produce output only if there's an error

  --ddl            Dump a human-readable SQL DDL of the schema

  --recreate       Drop and create the schema

  --sync-sql       Shows the SQL to sync the schema,
                   but does not execute it.

  --sync           Sync the schema.

  --dump-data      Dump the entire schema (DDL & DML) to a temp file

  --required-data  Make sure that required data for the application is present

  --maxretries     Number of times the command should try, if the first time it 
                   fails to connect to the DB.  Default: 8

EOF

    exit;
}
