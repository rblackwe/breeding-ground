#!/usr/bin/env perl
#
# Copyright (C) 2004-2006 by Socialtext, Inc.
#

# A quick and dirty script to gather and mail statistics about workspace
# usage from the apache logs. Only aggregate view and edit statistics are
# recorded at this time but we have the data to see what pages are being
# viewed and edited, how much any person visits more than one workspace,
# and lots of other things as well. Not implemented now as that would
# violate YAGNI, however I suspect we could NI. --cdent

use strict;
use warnings;

# XXX facillitate testing
use FindBin;
use lib "$FindBin::Bin/../lib";
use Socialtext::AppConfig;
use Socialtext::UsageStats;
use Socialtext::User;
use Socialtext::Workspace;
use Getopt::Long;
use IPC::Run ();
use Sys::Hostname;   
my %opts;
GetOptions(
    'no_mail'     => \$opts{no_mail},
    'help'        => \$opts{help},
    'skip_file=s' => \$opts{skip_file},
) or exit 1;

show_help() if $opts{help};

# XXX don't change this without also changing
# Socialtext::Page::_is_system_page 
my $FROM_ADDRESS = 'noreply@socialtext.com';

# actions to be counted as view
my @VIEW_ACTIONS = qw(
    attachments_download
    attachments_listall
    category_display
    category_list
    changes
    display
    display_html
    recent_changes
    weblog_display
    revision_list
    revision_view
    search
);

# actions to be counted as edit
my @EDIT_ACTIONS = qw(
    delete_page
    duplicate_popup
    edit
    edit_content
    email_page_popup
    enter_comment
    new_page
    send_to_workspace_popup
    copy_to_workspace_popup
);

my %SKIP_USERS = map { $_ => 1 } qw(
    perf.test@socialtext.com
);

my %SKIP_WORKSPACES = map { $_ => 1 } qw(
    _vti_bin
    MSOffice
    exchange
    web2con
);

my @DISPLAYED_ACTIONS = qw(View Edit);

my %visithash;
my %actions;

my %selected_workspaces = map { $_ => 1 } @ARGV;
my %action_summary;
my ( $day, $month, $year );    # the date to use in email subject

# Where are we running?
my $hostname = hostname();
my $is_appliance = -e '/etc/socialtext/appliance.conf' ? 1 : 0;

update_skip_list( $opts{skip_file} );
fill_action_summary( \%action_summary );
gather_data();
process_data();

# end of main

sub gather_data {
    # REVIEW: Why are we using STDIN instead of the magic filehandle?
    while ( my $log_line = <STDIN> ) {
        my $log_ref
            = Socialtext::UsageStats::parse_apache_log_line($log_line);

        # count only lines with authenticated socialtext users
        # skipping eventspace public side in the process
        next if ( $log_ref->{user} !~ /\@/ );

        next if ( $SKIP_USERS{ $log_ref->{user} } );

        # Some redirects should not be read as views/edits, such as
        # when a user is unauthorized to view the workspace.
        next if ($log_ref->{status} eq 302 &&
		 $log_ref->{referer} =~ /\/login\.html\?/);

        next unless $log_ref->{status} =~ /^[23]/;   # okay or redirect status

        my $workspace = lc Socialtext::UsageStats::get_workspace_from_url(
            $log_ref->{url}
        );

        next unless defined $workspace;

        next if %selected_workspaces and not $selected_workspaces{$workspace};

        next unless Socialtext::Workspace->new( name => $workspace );

        # we get the date from every line so that by the time we are to the
        # end of the log, we have the end date of the period
        $log_ref->{timestamp} =~ s/:.*$//;
        ( $day, $month, $year ) = split( '/', $log_ref->{timestamp} );

        # ascertain action
        # we've already determined that this is an index.cgi action
        # inside a workspace
        my $action = '';
        if ( $log_ref->{method} eq 'GET' ) {
            if ( $log_ref->{url} =~ m{index\.cgi\?action=(\w+)} ) {
                $action = $1;
            }
            else {
                $action = 'display';
            }
        }
        elsif ( $log_ref->{method} eq 'POST' ) {
            if (
                Socialtext::UsageStats::is_edit_action(
                    $log_ref->{method},
                    $log_ref->{url},
                    $log_ref->{status},
                    $log_ref->{referer},
                )
                ) {
                $action = 'edit';
            }
            else {
                # we got a currently undefined POST, so let action_summary
                # reject it
                $action = '';
            }
        }

        next unless exists $action_summary{$action};
        $actions{ $action_summary{$action} }++;

        # XXX inscrutable
        # update the count for the current user's action in this current
        # workspace
        $visithash{$workspace}{ $log_ref->{user} }
            { $action_summary{$action} }++;
    }
}

sub process_data {
    my $details = '';
    my $summary = "| *Workspace* | *Views* | *Edits* |\n";

    for my $workspace ( sort keys %visithash ) {
        my $per_workspace_stats;
        my $workspacecount = 0;
        my %action_total;

        $per_workspace_stats = "| *$workspace Workspace* |";
        foreach my $action (@DISPLAYED_ACTIONS) {
            $per_workspace_stats .= " *$action* |";
        }

        $per_workspace_stats .= " *Total* |\n";
        for my $user ( sort( keys %{ $visithash{$workspace} } ) ) {
            $per_workspace_stats .= "| $user | ";
            my $actioncount = 0;
            foreach my $action (@DISPLAYED_ACTIONS) {
                my $count = ( $visithash{$workspace}{$user}{$action} || 0 );
                $per_workspace_stats .= " $count |";
                $actioncount           += $count;
                $action_total{$action} += $count;
            }
            $per_workspace_stats .= " $actioncount |\n";
            $workspacecount += $actioncount;
        }

        $summary .= "| $workspace |";
        $per_workspace_stats .= "| Workspace Total |";
        foreach my $action (@DISPLAYED_ACTIONS) {
            $per_workspace_stats .= " $action_total{$action} |";
            $summary .= " $action_total{$action} |";
        }

        $summary .= "\n";
        $per_workspace_stats .= " $workspacecount |\n\n";

        # slow down mail delivery to not overwhelm with index updates
        sleep 1 unless $opts{no_mail};

        my $ws = Socialtext::Workspace->new( name => $workspace );
        $SKIP_WORKSPACES{$workspace} = 1
            if $ws->email_addresses_are_hidden;

        unless ( $SKIP_WORKSPACES{$workspace} ) {
            add_local_page(
                $workspace,
                $per_workspace_stats,
                "$workspace workspace usage $year $month $day",
            );
        }

        $details .= $per_workspace_stats;
    }

    if ($is_appliance) {
        produce_output(
            'appliance-reports@socialtext.net',
            $summary,
            "$hostname Summary Usage for week $year $month $day"
        );
    }

    if ($is_appliance) {
        add_local_page(
            'admin',
            $details,
            "$hostname Detailed Usage for week $year $month $day"
        );
    }
    else {
        produce_output(
            'corp@socialtext.net',
            $details,
            "$hostname Detailed Usage for week $year $month $day"
        );
    }
}

sub add_local_page {
    my $workspace = shift;
    my $output  = shift;
    my $subject = shift;

    return if $opts{no_mail};

    my $st_admin = Socialtext::AppConfig->admin_script();

    my ( $out, $err );
    IPC::Run::run(
        [
            $st_admin,     'update-page',
            '--workspace', $workspace,
            '--page',      $subject,
            '--username',  Socialtext::User->SystemUser()->username(),
        ],
        \$output,
        \$out,
        \$err
    );

    warn "Error running st-admin update-page for $workspace: $err\n" if $err;
}

sub produce_output {
    my $to      = shift;
    my $output  = shift;
    my $subject = shift;
    # XXX avoid warning
    $Socialtext::UsageStats::Mail_this_session
        = $Socialtext::UsageStats::Mail_this_session = !$opts{no_mail};

    Socialtext::UsageStats::send_email(
        from    => $FROM_ADDRESS,
        to      => $to,
        subject => $subject,
        body    => $output,
    );
}

sub fill_action_summary {
    my $hash = shift;
    map {$hash->{$_} = 'View'} @VIEW_ACTIONS;
    map {$hash->{$_} = 'Edit'} @EDIT_ACTIONS;
}

sub update_skip_list {
    my $file = shift;
    return unless $file;

    my ($fh, $line);
    open ($fh, "$file") or die "unable to open skip file $file\n";

    while ($line = <$fh>) {
        chomp($line);
        $SKIP_WORKSPACES{lc($line)} = 1;
    }
    
    close($fh);
}

sub show_help {
    print <<"EOF";

 st-workspace-view-edit-stats [<workspace name> <workspace name> ...]

 By default, without args, STDIN is parsed as an apache access log
 for workspace view and edit statistics. The results are mailed to
 each workspace counted, with a summary page mailed to the corp
 workspace.

 If one or more workspace names is given as an argument, only those 
 workspaces are counted and reported.

 This script is best run from cron just after logrotate has processed
 the apache logs:

   st-workspace-view-edit-stats < /path/to/last/weeks/apache/access.log

 The script knows the following options:

 --no_mail   Do not send mail. Instead send the output to STDOUT.

 --skip_file A list of workspaces, one per line, to be skipped.

 --help      Produce this output.

EOF
    exit(0);
}
